{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f28\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f31\froman\fcharset238\fprq2 Times New Roman CE;}{\f32\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f34\froman\fcharset161\fprq2 Times New Roman Greek;}{\f35\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f36\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f37\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f38\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f255\fswiss\fcharset238\fprq2 Verdana CE;}
{\f256\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f258\fswiss\fcharset161\fprq2 Verdana Greek;}{\f259\fswiss\fcharset162\fprq2 Verdana Tur;}{\f262\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green51\blue102;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}
{\s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}{
\s15\ql \fi720\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\cf9\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 Body Text 2;}}{\info{\title Introduction to Basic Program}{\author Information Technology}
{\operator buan}{\creatim\yr2000\mo8\dy10\hr13\min41}{\revtim\yr2000\mo8\dy10\hr13\min42}{\version3}{\edmins2}{\nofpages2}{\nofwords416}{\nofchars2373}{\*\company George Brown College}{\nofcharsws2914}{\vern8247}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1800\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex0\endnhere\sectlinegrid360\sectdefaultcl {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f28\cf17 Basics of Message Maps
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf9 
\par All built in messages begin with WM_ as a prefix. An example of this would be WM_LBUTTONDOWN, or WM_RBUTTONDOWN. The names tell you what they relate to.
\par 
\par When a message is received it can be accompanied with other information as well, such as cursor co-ordinates, or the value of what key was press on the keyboard.
\par 
\par With each message that your application has to deal with, there must be a corresponding event. An event is something that your application will do when this event happens. These are referred to as message handlers.
\par 
\par Using MFC style programming makes dealing with these messages far easier than the old traditional style windows programming.
\par 
\par }{\b\cf9 How does this work in your }{\b\cf9 application?}{\b\cf9 
\par }{\cf9 
\par This is what must be done in your application in order to deal with messages. The expected message must have a message macro declared inside the message map. This is located in your first program inside the DECLARE_MESSAGE_MAP.
\par 
\par Then since we are using classes, the function prototype, that is going to deal with this message, must be added to the appropriate class that is going to deal with this message.
\par 
\par Then the function (message handler) must be defined in the definition file of the }{\cf9 class that}{\cf9  is going to use it.
\par 
\par There really is nothing that is that much different from the C++ style programming. The only real difference is the adding of the message macro inside the DECLARE_MESSAGE_MAP. There is also a slight difference when adding the prototype to the cl
ass definition and that is the message handler must have afx_msg in front of the return value for the function. This is just how message handler functions are prototyped in defined in the message table..
\par 
\par It is common practice for the message handlers to h
ave the prefix ON_ added to the beginning of the WM_ macro. There is one exception to this and that is when using WM_COMMAND. This is simply ON_COMMAND. This is because WM_COMMAND is used by Windows for predefined functions. This will be explained later O
N_NOTIFY is another special type of windows message and it too will be explained.
\par 
\par All message handlers are already declared in the CWnd class. These handlers can be, and in most cases, will be overwritten by your program. There are exceptions, where you wi
ll not want to overwrite these message handlers. This is when the task, that must happen, is exactly the same as what is already written in the message handler by MFC. An example of this is the OK message handler in the MessageBox function. It just dismis
ses the message box as you will see later.
\par 
\par To view all the defaulted message handlers, type ON_ into the index of the help file and you will see the defaulted message handlers. There is far too many to view here. It is your }{\cf9 responsibility}{\cf9  to learn to search
 through the help files. Help files are sometimes your only friend when it comes to programming problems.
\par }{\cf9 
\par }}