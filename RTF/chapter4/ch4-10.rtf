{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f28\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f31\froman\fcharset238\fprq2 Times New Roman CE;}{\f32\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f34\froman\fcharset161\fprq2 Times New Roman Greek;}{\f35\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f36\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f37\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f38\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f255\fswiss\fcharset238\fprq2 Verdana CE;}
{\f256\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f258\fswiss\fcharset161\fprq2 Verdana Greek;}{\f259\fswiss\fcharset162\fprq2 Verdana Tur;}{\f262\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green51\blue102;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}
{\s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 1;}{
\s2\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs24\cf9\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{
\s15\ql \fi720\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\cf9\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 Body Text 2;}}{\info{\title Introduction to Basic Program}{\author Information Technology}
{\operator buan}{\creatim\yr2000\mo8\dy10\hr13\min50}{\revtim\yr2000\mo8\dy10\hr13\min50}{\version2}{\edmins0}{\nofpages2}{\nofwords310}{\nofchars1768}{\*\company George Brown College}{\nofcharsws2171}{\vern8247}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1800\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex0\endnhere\sectlinegrid360\sectdefaultcl {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f28\cf17 OnPaint Explained
\par }\pard\plain \s2\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs24\cf9\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0 
\par }{OnPaintWindow.h
\par 
\par }{\b0 This is where you would add the message handler afx_msg void OnPaint( ) . This is the only change here.
\par }{
\par OnPaintWindow.cpp
\par 
\par }{\b0 
Here you add the definition of the message handler, OnPaint( ) . Here you will see that it is using a different method to get a device context. It is using the CPaintDC class. You just create a variable of that class. As I mentioned before the normal vari
able name for a device context is dc. It is time to explain why use the CPaintDC class here compared to the CClientDC. 
\par 
\par This is done this way, because you have to use CPaintDC when using the OnPaint message handler. Here is the constructor prototype for CP
aintDC:: CPaintDC(CWND * Window). As you notice the prototype looks similar to the CClientDC. It takes a pointer to the window object CWND. As in CClientDC, device context use the pointer this.
\par 
\par If a device context can not be successful, it will report an CResourceException. The most important portion of CPaintDC is the variable of the structure PAINTSTRUCT
\par 
\par You will also notice that I have given the character array str a value this time at a different location. Also you will notice that when you press a ke
y this time , instead of displaying the key pressed I have decided to display the whole string stored in str. 
\par 
\par }{OnPaintApplication.h
\par 
\par }{\b0 There is no change in this file from the previous MessageApplication.
\par }{
\par OnPaintApplication.cpp
\par 
\par }{\b0 There is no change in this file from the previous MessageApplication
\par }{
\par Mainfile.cpp
\par }{\b0 
\par This adds the message macro On_WM_PAINT( ) in the message map.
\par 
\par Execute the program you will notice the contains of the string are displayed on the screen. This is caused, by the new On_Paint message
 handler. Then press any key you will notice that the string is displayed again in a different location. Then minimize the application and then restore it. You will notice that the screen has been redrawn and the original text inside the window but the se
cond string is not. Try to think about how to do display the second string. Try it on your own and later in the course it will be explained how to keep track of exactly what is in your window.
\par }{\b0 
\par }}