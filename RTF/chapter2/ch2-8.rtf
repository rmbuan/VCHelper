{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f72\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f159\froman\fcharset238\fprq2 Times New Roman CE;}{\f160\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f162\froman\fcharset161\fprq2 Times New Roman Greek;}{\f163\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f164\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f165\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f166\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f735\fswiss\fcharset238\fprq2 Verdana CE;}
{\f736\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f738\fswiss\fcharset161\fprq2 Verdana Greek;}{\f739\fswiss\fcharset162\fprq2 Verdana Tur;}{\f742\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green51\blue102;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 \snext0 Normal;}
{\s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs28\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}}{\info
{\title Message Loop}{\author telanis}{\operator Information Technology}{\creatim\yr2000\mo7\dy5\hr22\min10}{\revtim\yr2000\mo7\dy27\hr11\min53}{\version3}{\edmins0}{\nofpages1}{\nofwords0}{\nofchars0}{\*\company telanis corp}{\nofcharsws0}{\vern8247}}
\widowctrl\ftnbj\aenddoc\makebackup\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1800\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl 
{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs28\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 {\f72\fs32\cf17 Message Loop
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 {
\par }{\cf9 This is sometimes confusing. I will do my best to explain it here.
\par 
\par Your program must establish what is called a message loop. This is a place where messages are received by your progra
m. A user has clicked the mouse button. This message is stored in your application message loop and this message is then passed to Windows.
\par 
\par Windows will then use the windows procedure function and send the message back to your program with the message as a parameter or argument. Your application will then complete whatever action is required.
\par 
\par Since your program already has the message, why send it to Windows so Windows can send it right back? This is a logical question. The reason things are done this way
 and why it is Windows, that must call your application, is because Windows acts as Master Control. Windows must control the complete computer, which means it is responsible for controlling what process or thread gets access to the CPU. So windows will de
cide when your application will get processed.  
\par 
\par The complicated method also allows for control to be returned to Windows when your application has completed its task, s
o that maybe another application can get focus now. Remember part of the strength of Windows is the fact that it can appear to be running two applications at the same time.
\par 
\par The good news is, once again MFC will take care of the application message loop. It is the programmer's job to deal with just the messages passed to it from Windows. Again the message map will be explained, in greater depth in Chapter 3.
\par 
\par }}