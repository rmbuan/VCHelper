{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f72\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f159\froman\fcharset238\fprq2 Times New Roman CE;}{\f160\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f162\froman\fcharset161\fprq2 Times New Roman Greek;}{\f163\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f164\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f165\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f166\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f735\fswiss\fcharset238\fprq2 Verdana CE;}
{\f736\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f738\fswiss\fcharset161\fprq2 Verdana Greek;}{\f739\fswiss\fcharset162\fprq2 Verdana Tur;}{\f742\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green51\blue102;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 \snext0 Normal;}
{\s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f72\fs32\cf17\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}}{\info
{\title Windows Programming Environment}{\author telanis}{\operator Information Technology}{\creatim\yr2000\mo7\dy5\hr22\min5}{\revtim\yr2000\mo7\dy27\hr11\min54}{\version2}{\edmins0}{\nofpages2}{\nofwords463}{\nofchars2644}{\*\company telanis corp}
{\nofcharsws0}{\vern8247}}\widowctrl\ftnbj\aenddoc\makebackup\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1800\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl 
{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\f72\fs32\cf17\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 {Windows Programming Environment
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 { 
\par 
\par }{\cf9 Don\rquote t be surprised if you are a C++ programmer and don\rquote t recognize the code in Visual C++. If you have programmed in the traditional windows programming, again you may not recognize the code. Don\rquote 
t be too concerned with this. It may take some time to get used to the classes. Once you understand them, you will wonder why it took so long for you to start learning this type of programming.
\par 
\par The easiest way to explain Windows programming is to understand that windows has a group of fu
nctions that are built into the operating system. These functions know how to do the basic tasks of dynamically creating memory, output to the screen and creating windows. These are all incorporated into the operating system's API. All your program has to
 do is call the right API. This is referred to as a call based interface.
\par 
\par Microsoft Foundation Classes are really just a group of pre-defined classes that wrap themselves around API calls. This just makes it easier for the programmer to call the API. It is important to know that the Windows operating system has thousands of API
\rquote s and it would be near impossible for programmers to become familiar with them all.
\par 
\par Through the member functions of the MFC classes, the programmer just has to know which method he needs to call and which class has that method to get to that particular API.
\par 
\par API\rquote s are made up of individual Dynamic Link Libaries(DLL). Each DLL contains certain functions that are required for the API to do it\rquote s job. These DLLs are files separate from the API. 
\par 
\par When your program is compiled, the compiler knows which functions in which DLLs are being called. To ensure that your program does not become too large after being compiled, the DLL\rquote s are not included during the compiling process into the executa
ble code. ( The DLLs could be compiled , if the programmer chose to create a static application. This is not normally done.)  What is compiled however is the instruction of how to load that DLL into memory when required by your program.
\par 
\par It is important to know that one DLL can be called from many different programs. So if each new program compiled the DLL into each program, then the same code would be stored several different times, causing a large amount of disk space to have the same c
ode. This would be a waste of valuable hard drive space.
\par 
\par Another benefit to having DLL\rquote s not included in the executable code is, the fact that the DLL\rquote s can be upgraded and changed without effecting the programs use it.
\par 
\par There are two versions of the API included in Version 6. The 16 bit (Win16) and the 32 bit (Win32) , but again as already stated, this course will only deal with the Win32.
\par 
\par The biggest advantage of using the 32 bit version of the API is the fact that you no longer have to worry whether to declare a pointer as near of far. The 32 bit addressing allows the pointers to treat memory as if it was just a flat memory model.
\par 
\par Graphical Device Interface (GDI) is an API that allows for graphics to be displayed without knowing what video card is actua
lly installed. It allows for Windows to support device independent graphics support. Something traditional Windows programming could not do.
\par 
\par   
\par }}