Code Explained by Files


FirstDialogWin.h

This is a simple window definition. You will notice the message handlers, OnShowDialog, OnHelp and OnExit are prototyped here.

FirstDialogWin.cpp

Here the constructor creates the window and loads the menu and accelerator table. OnShowDialog( ) creates an object of CDialogBox ( our derived class for the dialog box) and then calls DoModal( ) to display the dialog box. DoModal has two parameters one that is the title ( FirstDialogBox ) and the other is a pointer of CWnd type which is pointing to "this", which means it is a child window of sorts to the main window. FirstDialogBox is the DialogBox that was defined in the resource file.

OnExit calls the SendMessage function with the WM_CLOSE parameter as an argument. To close the dialog box. EndDialog is another method to close a Dialog box and will be explained further later. It is used to process some action when you close the Dialog box, but in this case all we really want to do is close the dialog box and destroy the memory that it is using.

FirstDialogApp.h

This is a standard application class. It is derived from CWinApp . InitInstance is the function that will be used to setup any conditions for the window to open.

FirstDialogApp.cpp

This is a standard application class definition. Notice that InitIstance is doing nothing that it has not done before. It is important to remember that if your application requires anything to be present , either a file or a hardware component that this is the function that you use to make sure that they are present.

DialogBox.h

This is the class definition for the dialog box. Remember, only the simple dialog boxes are not a derived class from CDialog. In most cases it would be wise to inherit from CDialog. You will notice,  in the header file is a call to the base class CDialog constructor. The derived class accepts two parameters. Either the Dialog Box Name or ID and the window that the dialog box will be display within. Remember here the name and ID are referring to the same dialog box. It is just an overloaded constructor that will allow either a string or an integer to be sent to the function. Notice that the message handlers are also declared here.

DialogBox.cpp

This is where the message handlers are defined. All they do at this time is just display a message box informing the user what would normally happen at this point , if this was a real application.

MainFile.cpp

Notice here that there are two message maps. One for the window and the other is for the dialog box. If there were more than one dialog box, you would have to include more message maps. Remember each window must have its own message map.

The two message maps co-exist because of the BEGIN_MESSAGE_MAP macro tells which message map belongs to which window or dialog box. When the ON_COMMAND message is generated by the user , it passes along a unique IDD_XXX value that has been defined in the IDS header file. Then it also tells which message handler will handle the message. In the event of the sales button being pushed , the ID value would be 400 and the message that is assigned to deal with it is OnSales. Here is where the application is instantiated as well.

IDS.h

This just provides for the identifiers to be enumerated.

FirstDialogbox.rc

This file is where the Dialog box is defined. The name of the Dialog box is FirstDialog. Normally the FirstDialog dialog box would have been assigned an integer value in the IDS.h file. This was not done in this example. It will be done in the GUI part of the course. 

The Caption for this Dialog box is "The First Dialog Box", which will be displayed in the title bar of the dialog box. The styles are defined to have a system menu. The features are defined within the open and close brackets. These features will also have styles of their own. WS_Tabstop , WS_Child are examples of these styles. The Styles you can discover on your own , during the GUI part of this course. Notice here that you have to manually enter the location of each control. This is not an effectient method of programming. It will assist you in appreciating the GUI tools.

